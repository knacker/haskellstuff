3.1
Tworst(0) = Tbest(0) = c(make) = 1

Tworst(n) = c(==) + c(<) + Tworst
          = c(==) + c(<) + ... + Tworst(0)
          = 2 * n + 1
          => O(n)
          
Tbest(n) = c(==) = 1 => O(1)

best case : einzufügendes element wird mit ersten elements des knotens verglichem. wenn element gleich, passiert nichts

worst case : einzufügendes element ist das größte element im baum und muss alle fälle durchlaufen

3.2
Tworst(0) = Tbest(0) = c(make) = 1
Tbest(n) = TbestInsert(n) + Tbest(n-1)
         = 1 + ... + Tbest(0)
         = n + 1
         => O(n)
         
Tworst(n) = TworstInsert(n) + Tworst(n-1)
          = (3n +1) + ... + Tworst(0)
          = n * (3n + 1) + 1
          = 3n^2 + n + 1
          => O(n^2)
          
best case : liste besteht nur ais gleichen elementen. dadurch muss immer nur verglichen werden und der baum erzeugt werden

worst case : liste beinhaltet keine doppelten elemente. vergleichsoperation muss jedes mal ausgeführt werden

3.3
Tbest(0) = Tbest(0) = Empty = 1 => O(1)
Tworst(n) = c(==) + c(==) + c(++) + TworstLeaves(n - 1) + TworstLeaves(n - 1)
          = (3*n) * (n - 1) * (n - 1)
          = (3n^2 - 3n) * n - 1
          = 3n^3 - 3n^2 - 3n^2 + 3n
          = 3n^3 - 6n^2 + 3n^
          => O(n^3)